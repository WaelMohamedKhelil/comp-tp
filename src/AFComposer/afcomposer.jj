PARSER_BEGIN(AfComposer)
package AFComposer;


public class AfComposer {
    public State parse() {

        try {
            return S();
        } catch (ParseException e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
            return null;
        }

    }
}

PARSER_END(AfComposer)

SKIP:  { " " | "\t" | "\n" | "\r" | <"//" (~["\n","\r"])* ("\n"|"\r")> }
TOKEN: {
    
      "{"
    | "}"
    | "("
    | ")"
    | ";"
    | "~"
    | "+"
    | "ACTIONS"
    | <EVENT: "click" | "dbclick" | "chrkeypress" | "enterkeypress" | "numkeypress" | "drag" | "drop">
    | <LETTER: (["a"-"z"] | ["A"-"Z"])>
    | <DIGIT: (["0"-"9"])+> 
    | <ID: <LETTER> (<LETTER>|<DIGIT>|"_")* >
    | <ALPHA: (["a"-"z"] | ["A"-"Z"])+ >
    | <ALPHANUM: (["a"-"z"] | ["A"-"Z"] | ["0"-"9"])+ >
    | <NUM: (["0"-"9"])+> 
    }

State S(): {State state = new State();}
{
  "ACTIONS" ACTIONS(state, new State())<EOF> {return state;}
}


State ACTIONS(State S1, State S2): {State E = null; State F = null;}
{
  (("{" E = ACTIONS(S1, S2) "}" F = _ACTIONS(S1, E))
  |(E = ACTION(S1, S2) F = _ACTIONS(S1, E))
  )
  {return F;}
}
// this methode is added to remove the left recursivity 
State _ACTIONS(State S, State E): {State state = null; State F = null;}
{
   (";" state = ACTIONS(E, new State()) F = _ACTIONS(E, state)){return F;}
  |("+" state = ACTIONS(S, new State()) F =_ACTIONS(S, state)){return F;}
  |("~" state = ACTIONS(S, E) F =_ACTIONS(S, state)){return F;}
  |{}{return E;}
}

State ACTION(State state, State F): {Token event, id;}
{
  event=<EVENT>"(" id=<ID> ")"
  {
    state.addTransition(new Transition(EventsEnum.valueOf(event.image.toUpperCase()), F, id.image));
    return F;
  }
}
