PARSER_BEGIN(AfComposer)
package AFComposer;


public class AfComposer {
    public State parse() {

        try {
            return S();
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
            return new State();
        }

    }
}

PARSER_END(AfComposer)

SKIP:  { " " | "\t" | "\n" | "\r" | <"//" (~["\n","\r"])* ("\n"|"\r")> }
TOKEN: {
    
      "{"
    | "}"
    | "("
    | ")"
    | ";"
    | "~"
    | "+"
    | "ACTIONS"
    | <EVENT: "click" | "dbclick" | "chrkeypress" | "enterkeypress" | "numkeypress" | "drag" | "drop">
    | <LETTER: (["a"-"z"] | ["A"-"Z"])>
    | <DIGIT: (["0"-"9"])+> 
    | <ID: <LETTER> (<LETTER>|<DIGIT>|"_")* >
    | <ALPHA: (["a"-"z"] | ["A"-"Z"])+ >
    | <ALPHANUM: (["a"-"z"] | ["A"-"Z"] | ["0"-"9"])+ >
    | <NUM: (["0"-"9"])+> 
    }

State S(): {State state = null;}
{
  "ACTIONS" ACTIONS()<EOF> {return state;}
}


State ACTIONS(): {State state = null, x;}
{
  (("{" ACTIONS() "}" _ACTIONS())
  |(ACTION()_ACTIONS())
  )

  {return state;}
}
// this methode is added to remove the left recursivity 
State _ACTIONS(): {State state = null, x;}
{
  ((";" ACTIONS() _ACTIONS())
  |("~" ACTIONS() _ACTIONS())
  |("+" ACTIONS() _ACTIONS())
  |{}
  )

  {return state;}
}

State ACTION(): {State state = null, x;}
{
  <EVENT>"(" <ID> ")"{return state;}
}
